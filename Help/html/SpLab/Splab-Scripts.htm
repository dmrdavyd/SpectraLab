<!--?xml version="1.0"?-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html;
      charset=windows-1252">
    <meta name="GENERATOR" content="DexH v03">
    <style type="text/css">
</style>
    <title> </title>
  </head>
  <body>
    <hr><font face="Comic Sans MS"> </font>
    <h1><font color="#3333ff" face="Comic Sans MS">Basics of the
        SpectraLab Scripting Language </font></h1>
    <hr>
    <h2><font face="Calibri">Necessary Elements of Forth programming </font></h2>
    <font face="Calibri"> <font size="+1">The SpectraLab scripts should
        be written according to the general rules of the Forth
        programming with the use of either standard operators of
        Win32Forth or SpecrtraLab-specific operators (to be described
        below). The very basics principles of Forth programming, which
        SpectraLab user has to know in order to write SpectraLab scripts
        are briefly summarized below. More detailed information on Forth
        programming including several Forth tutorials, Win32Forth
        reference, and a description of ANS Forth standard may be found
        in "Forth Programming Guide" section of this Help.&nbsp; </font></font>
    <ul>
      <li><font size="+1" face="Calibri">Forth is a stack-based
          language. There are two separate data stacks in the basic
          WinForth: the stack of integer (natural) numbers and the stack
          of the floating-point (real) numbers. When Forth interpreter
          encounters a number in the command line, it places it into the
          stack that corresponds to the type of the number: integers
          (entered as "-1", "0", "1", "100", "999", etc.) are placed
          into the stack of integers and the real numbers (entered as
          "0.0" or "0.", "3.1415926", or "6.0221408E23", etc., or any
          numbers preceded with "F#" word ) will be placed into the
          floating-point stack. </font></li>
      <li><font size="+1" face="Calibri">If necessary, the real numbers
          can be converted into integers and vice versa. For this
          purpose, we use "f2i" and "i2f" commands, respectively. Thus,
          the command <b>2.1 f2i</b> is equivalent to simply <b>2</b>:
          the real number 2.1 will be placed into the stack of real
          numbers, but upon executing the operator "f2i", it will be
          rounded to 2 and moved into the stack of integers. Similarly,
          <b>2 i2f</b> will result in placing 2.0 into the stack of real
          numbers, thus being an equivalent of <b>2.0</b>. </font></li>
      <li><font size="+1" face="Calibri">Arithmetic expressions in Forth
          are written in so-called "Reverse Polish Notation". It means
          that the operands of any mathematical operation <i>precede</i>
          the operator (i.e., a sign of an arithmetic operation or a
          name of a mathematical function). In practice, when the Forth
          interpreter encounters an arithmetic operator ("+", "-", "/"
          or "*"), it takes the two uppermost values from the data stack
          and performs the requested operation on them. These former
          operands are now removed from the stack and the result is
          placed at the top instead. </font></li>
      <li><font size="+1" face="Calibri">Note, that the operators "+",
          "-", "/" and "*" are applied to the stack of integers (and the
          result is also placed in the same stack). For operations with
          real numbers, the operators "F+", "F-", "F/" and "F*" are used
          instead. In this case, the operands will be taken from the
          stack of real numbers, and the result will be found in the
          same (floating-point) stack. </font></li>
      <li><font size="+1" face="Calibri">To display numeric results of
          the computation in SpectraLab, we use "?I" and "?F" operators
          (for more details about text output in SpectraLab, see "CRT
          commands in SpectraLab" page). Thus, entering </font><font
          size="+1" face="Calibri"><b>2 6 + 2 / ?I</b> will display 4 (
          (2+6)/2=4) in the CRT window (a separate window that will be
          opened automatically). Entering <b>2.0 5.0 F* 3E0 F/ ?F</b>
          will result in displaying "3.333333"&nbsp; (2*5/3=3.333333) in
          the CRT window. </font></li>
    </ul>
    <font size="+1" face="Calibri"> </font>
    <p><font size="+1" face="Calibri">Besides arithmetic operators
        mentioned above, there are several operators on the stacks
        useful in writing mathematical expressions. The pairs of
        operators listed in the first and the second columns of the
        table below operate on the stacks of natural and floating-point
        numbers, respectively: </font></p>
    <font size="+1" face="Calibri"> </font>
    <table border="1">
      <tbody>
        <tr>
          <td><font size="+1" face="Calibri"><b>Stack of integers</b></font>
          </td>
          <td><font size="+1" face="Calibri"><b>Floating-point stack</b></font>
          </td>
          <td><font size="+1" face="Calibri"><b>Performed operation</b></font>
          </td>
        </tr>
        <tr>
          <td><font size="+1" face="Calibri">SWAP </font></td>
          <td><font size="+1" face="Calibri">FSWAP </font></td>
          <td><font size="+1" face="Calibri">Swaps the top two layers of
              the stack: n1 n2 -&gt; n2 n1 </font></td>
        </tr>
        <tr>
          <td><font size="+1" face="Calibri">DROP </font></td>
          <td><font size="+1" face="Calibri">FDROP </font></td>
          <td><font size="+1" face="Calibri">Drops the top layer: n1 n2
              -&gt; n1 </font></td>
        </tr>
        <tr>
          <td><font size="+1" face="Calibri">DUP </font></td>
          <td><font size="+1" face="Calibri">FDUP </font></td>
          <td><font size="+1" face="Calibri">Duplicates the top layer:
              n1 -&gt; n1 n1 </font></td>
        </tr>
        <tr>
          <td><font size="+1" face="Calibri">2DUP </font></td>
          <td><font size="+1" face="Calibri">F2DUP </font></td>
          <td><font size="+1" face="Calibri">Duplicates the two topmost
              layers: n1 n2 -&gt; n1 n2 n1 n2 </font></td>
        </tr>
        <tr>
          <td><font size="+1" face="Calibri">OVER </font></td>
          <td><font size="+1" face="Calibri">FOVER </font></td>
          <td><font size="+1" face="Calibri">Copies the second layer to
              the top: n1 n2 -&gt; n1 n2 n1 </font></td>
        </tr>
        <tr>
          <td><font size="+1" face="Calibri">ROT </font></td>
          <td><font size="+1" face="Calibri">FROT </font></td>
          <td><font size="+1" face="Calibri">Rotates the three top
              layers: n1 n2 n3 -&gt; n2 n3 n1 </font></td>
        </tr>
      </tbody>
    </table>
    <font size="+1" face="Calibri"> </font>
    <p><font size="+1" face="Calibri">Similar operators (#SWAP, #DUP,
        etc.) are also defined for the operations on the stack of traces
        (see below). Note that attempts to apply floating-point
        operations to integers and vice versa will result in a "Stack
        underflow" error. </font></p>
    <font face="Calibri"> </font>
    <h2><font face="Calibri">SpectraLab-specific stack of traces and its
        use </font></h2>
    <font face="Calibri"> </font>
    <p><font size="+1" face="Calibri">In addition to the Forth-native
        stacks of integers and floating-point numbers, SpectraLab also
        uses its customary-defined stack of traces (spectra) for
        operations on the whole traces. </font></p>
    <font size="+1" face="Calibri"> </font>
    <ul>
      <font size="+1"> </font>
      <li><font size="+1" face="Calibri">The SpectraLab-specific stack
          of traces is used for mathematical operations on traces
          (spectra, kinetic traces, or other two-dimensional datasets).
          All trace-specific operators start with the pound sign (like
          "#+", #-", etc.). To place a trace into the stack, we use
          "&nbsp;<i>n</i> #:" notation, where "<i>n</i>" is the number
          of the trace. To put a trace from the stack to the desired
          location one should enter "<i>n</i> #!", where <i>n</i> is
          the desired destination. Thus, entering <b>1 #: 5 #!</b>
          &nbsp;will copy trace #1 into location #5. In these
          expressions, the dollar sign ("$") can be used as the number
          of the current position of the cursor line in the SpectraLab
          data window. Thus, the script <b>$ #: $ 1 + #!</b> will copy
          the trace under the cursor to the next location (i.e., if the
          line-cursor is at line 1, the trace #1 will be copied to
          location #2). </font></li>
      <font size="+1"> </font>
      <li><font size="+1" face="Calibri">To move the trace cursor up and
          down, we use "inc" and "dec" operations. "Inc" moves the
          line-cursor one line down, and "dec" moves it one line up. . </font></li>
      <font size="+1"> </font>
      <li><font size="+1" face="Calibri">Arithmetic operations with
          abscissa and ordinate of traces are invoked by operators
          "#X+", "#X-", "#X*", "#X/" and "#Y+", "#Y-", "#Y*", "#Y/",
          respectively. In the case of operations on the ordinate, the
          letter "Y" may be omitted: "#+", "#-", #*" and "#/" are
          equivalents of "#Y+", "#Y-", "#Y*", "#Y/". The same operators
          are used for both the operations on two traces and those on a
          trace and a real number: if the stack of real numbers is
          empty, these operations are applied to the two topmost traces
          in the trace stack. However, if there is a number in the stack
          of reals, these operations will be applied to the topmost
          trace in the stack of traces and a topmost number in the stack
          of reals. For example, the command <b>1 #: 2 #: #+ 3 #!</b>
          will summarize the traces #1 and #2 and place the result into
          location #3. Upon execution of the command <b>1 #: 2 #: 2.0
            #* #+ 3 #!</b> , the trace #2 will be first multiplied by 2,
          and than trace #1 will be added to the result of
          multiplication. The resulting sum of two traces #2 and one
          trace #1 will be placed at location #3. </font></li>
      <li><font size="+1" face="Calibri">Note, that arithmetic
          operations (summarizing, multiplying, etc.) on the traces of
          different length will result in truncation: the number of
          points in the resulting trace will be equal to the number of
          points in the shortest of the two traces-operands. <br>
        </font></li>
      <font size="+1"> </font>
      <li><font size="+1" face="Calibri">To access individual data
          points in the traces (spectra) we use "<i>n1 n2</i> X::" and "<i>n1

            n2</i> Y::" notations. Here <i>n1</i> and <i>n2</i> are
          the number of the trace and the number of a specific point in
          it. Upon the execution of "X::" and "Y::" operators, the
          respective values of abscissa ("X::") or ordinate("Y::) of the
          point specified by <i>n1</i> and <i>n2</i> will be placed
          into the stack of reals. Thus, the command </font><font
          size="+1" face="Calibri"><b>$ 1 X:: ?F $ 1 Y:: ?F</b> will
          display the values of the abscissa and ordinate of the trace
          under the cursor line in the CRT window. </font></li>
      <font size="+1"> </font>
      <li><font size="+1" face="Calibri">To repeat the execution of a
          sequence of commands entered in the command line, one should
          start it with the operator "do(<i>n</i>)", where <i>n</i> is
          the number of desired repeats. Thus, the command <b>do(20)
            inc</b> will move the cursor line 20 position down. Note
          that <i>n</i> in the cycle operator should be an explicitly
          written integer number. In other words, arithmetic operations
          or the names of variables inside parentheses in the cycle
          operator are not allowed. The construct "do(<i>n</i>)" is
          command-line-specific - it can be used only at the beginning
          of the Spectralab command line. It is not applicable in
          multi-line scripts (user-defined Forth words). </font></li>
    </ul>
    <font face="Calibri"> </font>
    <h2><font face="Calibri">Glossary of SpectraLab-specific operators
        that can be used in command-line scripts </font></h2>
    <font face="Calibri"> </font>
    <ul>
      <li><font size="+1" face="Calibri">Each glossary entry below is
          followed by three expressions separated by semicolons and
          placed in parentheses. These expressions stand for the
          contents of the integer, floating-point, and trace stacks
          (respectively) before and after executing the respective
          command. Expression to the left of the slash shows the initial
          content of the stack. The content of the stack after executing
          the operator is shown after the slash. Double dash sign stays
          for no parameters in the stack required at input or returned
          at output. Parameters shown in the angle brackets (&lt;&gt;)
          are optional and may be omitted in some cases (see
          descriptions of the respective glossray entries). </font></li>
      <font size="+1"> </font>
    </ul>
    <font size="+1" face="Calibri"> </font>
    <pre><font size="+1" face="Calibri"><b><a name="0">   #: </a></b><a name="0">( n / -- ; -- / -- ; -- / #n)</a><b><a name="0">
</a></b>     Places the &nbsp;trace #n into the stack of traces
</font><pre><font size="+1" face="Calibri"><b><a name="1">   #! </a></b><a name="1">( n / -- ; -- / -- ; #A / -- )</a><b><a name="1">
</a></b>     Places the trace from the top of the stack of traces into location #n
</font><pre><font size="+1" face="Calibri"><b><a name="2">   Y:: </a></b><a name="2">( n1 n2 / -- ; -- / Y[n1,n2] ; -- / -- )</a><b><a name="2">
</a></b>     Returns the ordinate value of the point <i>n2</i> from the trace <i>n1</i>. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="3">   X:: </a></b><a name="3">( n1 n2 / -- ; -- / X[n1,n2] ; -- / -- )</a><b><a name="3">
</a></b>     Returns the abscissa value of the point <i>n2</i> from the trace <i>n1</i>. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="4">   Z: </a></b><a name="4">( n1 / -- ; -- / Z ; -- / -- )</a><b><a name="4">
</a></b>     Returns the "Z-value" associated with the trace <i>n1</i>. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="5">   !Z:</a></b><a name="5"> ( n1 / -- ; -- / Z ; -- / -- )</a><b><a name="5">
</a></b>     Assigns the topmost value from the stack of reals to the "Z-value" associated with the trace <i>n1</i>.
</font><pre><font size="+1" face="Calibri"><b><a name="6">   @Z </a></b><a name="6">( -- / -- ; -- / Z ; -- / -- )</a><b><a name="6">
</a></b>     Returns the "Z-value" associated with the current trace (trace under the cursor-line). The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="7">   !Z</a></b><a name="7"> ( -- / -- ; Z / -- ; -- / -- )</a><b><a name="7">
</a></b>     Assigns the topmost value from the stack of reals to the "Z-value" associated with the current trace (trace under the cursor-line).
</font><pre><font size="+1" face="Calibri"><b><a name="8">   #X+ </a></b><a name="8">( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C)</a><b><a name="8">
</a></b>     If the stack of reals is empty, this operation adds the abscissa of trace #A to the abscissa of trace #B.
     Otherwise, it adds the value taken from the stack of reals (F1) to the abscissa of the trace at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="9">   #Y+</a></b><a name="9"> ( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C )</a><b><a name="9">
</a></b>     If the stack of reals is empty, this operation adds the ordinate of trace #A to the ordinate of trace #B.
     Otherwise, it adds the value taken from the stack of reals (F1) to the ordinate of the trace at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="10">   #X- </a></b><a name="10">( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C )</a><b><a name="10">
</a></b>     If the stack of reals is empty, this operation subtracts the abscissa of trace #A from the abscissa of trace #B.
     Otherwise, it subtracts the value taken from the stack of reals (F1) from the abscissa of the trace at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="11">   #Y-</a></b><a name="11"> ( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C )</a><b><a name="11">
</a></b>     If the stack of reals is empty, this operation subtracts the ordinate of trace #A from the ordinate of trace #B.
     Otherwise, it subtracts the value taken from the stack of reals (F1) from the ordinate of the trace at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="12">   #X*</a></b><a name="12"> ( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C )</a><b><a name="12">
</a></b>     If the stack of reals is empty, this operation multiples the abscisses of traces #A and #B.
     Otherwise, it multiplies the abscissa of the trace at the top of the stack by the value taken from the stack of reals (F1)
</font><pre><font size="+1" face="Calibri"><b><a name="13">   #Y* </a></b><a name="13">( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C )</a><b><a name="13">
</a></b>     If the stack of reals is empty, this operation multiples the ordinates of traces #A and #B.
     Otherwise, it multiplies the ordinate of the trace at the top of the stack by the value taken from the stack of reals (F1)
</font><pre><font size="+1" face="Calibri"><b><a name="14">   #X/</a></b><a name="14"> ( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C )</a><b><a name="14">
</a></b>     If the stack of reals is empty, this operation divides the abscissa of trace #B by the abscissa of trace #A.
     Otherwise, it divides the abscissa of the trace at the top of the stack by the value taken from the stack of reals (F1)
</font><pre><font size="+1" face="Calibri"><b><a name="15">   #Y/ </a></b><a name="15">( -- / -- ; &lt;F1&gt; / -- ; #A &lt;#B&gt; / #C )</a><b><a name="15">
</a></b>     If the stack of reals is empty, this operation multiplies the ordinata of trace #B by the ordinata of trace #A.
     Otherwise, it multiplies the ordinata of trace at the top of the stack by the value taken from the stack of reals (F1)
</font><pre><font size="+1" face="Calibri"><b><a name="16">   #+
</a></b>     An equivalent of #Y+
</font><pre><font size="+1" face="Calibri"><b><a name="17">   #-
</a></b>     An equivalent of #Y-
</font><pre><font size="+1" face="Calibri"><b><a name="18">   #*
</a></b>     An equivalent of #Y*
</font><pre><font size="+1" face="Calibri"><b><a name="19">   #/
</a></b>     An equivalent of #Y/
</font><pre><font size="+1" face="Calibri"><b><a name="20">   #SWAP </a></b><a name="20">( -- / -- ; -- / -- ; #A #B / #B #A )</a><b><a name="20">
</a></b>     Swaps two traces at the top of the stack of traces
</font><pre><font size="+1" face="Calibri"><b><a name="21">   #ROT &nbsp;</a></b><a name="21">( -- / -- ; -- / -- ; #A #B #C / #B #C #A)</a><b><a name="21">
</a></b>     Rotates three traces at the top of the stack of traces
</font><pre><font size="+1" face="Calibri"><b><a name="22">   #DROP </a></b><a name="22">( -- / -- ; -- / -- ; #A / -- )</a><b><a name="22">
</a></b>     Drops the topmost trace in the stack of traces
</font><pre><font size="+1" face="Calibri"><b><a name="23">   #DUP </a></b><a name="23">( -- / -- ; -- / -- ; #A / #A #A )</a><b><a name="23">
</a></b>     Duplicates the trace at top of the stack of traces<b>
</b></font><pre><font size="+1" face="Calibri"><b><a name="24">   #OVER </a></b><a name="24">( -- / -- ; -- / -- ; #A #B / #A #B #A )
</a>     Copies the second trace from the top to the top of the stack<b>
</b></font><pre><font size="+1" face="Calibri"><b><a name="25">   #LOGX </a></b><a name="25">( -- / -- ; -- / -- ; #A / #LOGX[#A] )</a><b><a name="25">
</a></b>     Calculates the natural logarithm of abscissa of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="26">   #LOGY </a></b><a name="26">( -- / -- ; -- / -- ; #A / #LOGY[#A] )</a><b><a name="26">
</a></b>     Calculates the natural logarithm of ordinate of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="27">   #ABSX</a></b><a name="27"> ( -- / -- ; -- / -- ; #A / #ABSX[#A] )</a><b><a name="27">
</a></b>     Calculates the absolute value of abscissa of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="28">   #ABSY </a></b><a name="28">( -- / -- ; -- / -- ; #A / #ABSY[#A] )</a><b><a name="28">
</a></b>     Calculates the absolute value of ordinate of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="29">   #EXPX </a></b><a name="29">( -- / -- ; -- / -- ; #A / #EXPX[#A] )</a><b><a name="29">
</a></b>     Calculates the exponential function of abscissa of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="30">   #EXPY </a></b><a name="30">( -- / -- ; -- / -- ; #A / #EXPY[#A] )</a><b><a name="30">
</a></b>     Calculates the exponential function of ordinate of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="31">   #SMO </a></b><a name="31">( &lt;n&gt; -- / -- ; -- / -- ; #A / #SMO[#A] )</a><b><a name="31">
</a></b>     Performs polynomial smoothing of the trace at the top of the stack (the original trace is not changed).
     The size of the moving window is taken from the stack of integers.
     The window size may vary from 3 to 21 points. For the 3-points window, a second-order polynomial is used. In all other cases,
     the smoothing is with a 3-rd order polynomial.
     If the width of the smoothing window is not specified (the stack of integers is empty), the 5-point smoothing is applied.
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="32">   #TRI </a></b><a name="32">( &lt;n&gt; -- / -- ; -- / -- ; #A / #TRI[#A] )</a><b><a name="32">
</a></b>     Performs "triadic" (Tukey) smoothing of the trace at the top of the stack (the original trace is not changed).
     The size of the moving window is taken from the stack of integers. The window size may vary from 3 to 7 points.
     If the width of the smoothing window is not specified (the stack of integers is empty), the window of three points is used.
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="33">   #DER1 </a></b><a name="33">( -- / -- ; -- / -- ; #A / #DER1[#A] )</a><b><a name="33">
</a></b>     Calculates the first derivative of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="34">   #DER2 </a></b><a name="34">( -- / -- ; -- / -- ; #A / #DER1[#A] )</a><b><a name="34">
</a></b>     Calculates the second derivative of the trace at the top of the stack of traces (the original trace is not changed).
     The result is placed at the top of the stack.
</font><pre><font size="+1" face="Calibri"><b><a name="35">   #DER
</a></b>     DER is a synonym of #DER2
</font><pre><font size="+1" face="Calibri"><b><a name="36">   #MEAN </a></b><a name="36">( -- / -- ; -- / MEAN[#A] ; #A / -- )</a><b><a name="36">
</a></b>     Calculates the arithmetic mean of ordinate values of a trace. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="37">   #AREA </a></b><a name="37">( -- / -- ; -- / AREA[#A] ; #A / -- )</a><b><a name="37">
</a></b>     Calculates the area under the curve for a given trace. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="38">   #MINX </a></b><a name="38">( -- / -- ; -- / MINX[#A] ; #A / -- )</a><b><a name="38">
</a></b>     Returns the minimal of all abscissa values of a given trace. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="39">   #MINY </a></b><a name="39">( -- / -- ; -- / MINY[#A] ; #A / -- )</a><b><a name="39">
</a></b>     Returns the minimal of all ordinate values of a given trace. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="40">   #MAXX </a></b><a name="40">( -- / -- ; -- / MAXX[#A] ; #A / -- )</a><b><a name="40">
</a></b>     Returns the maximal of all abscissa values of a given trace. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="41">   #MAXY </a></b><a name="41">( -- / -- ; -- / MAXY[#A] ; #A / -- )</a><b><a name="41">
</a></b>     Returns the maximal of all ordinate values of a given trace. The result is placed at the top of the stack of reals.
</font><pre><font size="+1" face="Calibri"><b><a name="42">   #TRUNC </a></b><a name="42">( -- / -- ; FA / -- ; #A / #TRUNCY[#A,FA] )</a><b><a name="42">
</a></b>     "Truncates" the ordinata of trace #A at the value taken from the stack of reals (FA) in the meaning that
     all values larger than FA will be replaced by FA
</font><h3><font size="+1" face="Calibri">The following words do not operate with the stacks of reals and traces. Hence, the expressions
in parentheses shows the content of the stack of natural numbers only:
</font></h3><pre><font size="+1" face="Calibri"><b><a name="43">   #DEPTH </a></b><a name="43">( -- / n )</a><b><a name="43">
</a></b>     Returns the depth of th<b>e stack of traces (a number of traces in the stack)
</b></font><pre><font size="+1" face="Calibri"><b><a name="44">   LOGX </a></b><a name="44">( -- / -- )</a><b><a name="44">
</a></b>     Calculates the natural logarithm of abscissa of the current trace and REPLACES it with the result.
</font><pre><font size="+1" face="Calibri"><b><a name="45">   LOGY </a></b><a name="45">( -- / -- )</a><b><a name="45">
</a></b>     Calculates the natural logarithm of ordinata of the current trace and REPLACES it with the result.
</font><pre><font size="+1" face="Calibri"><b><a name="46">   EXPX </a></b><a name="46">( -- / -- )</a><b><a name="46">
</a></b>     Exponentiates the abscissa of the current trace and REPLACES it with the result.
</font><pre><font size="+1" face="Calibri"><b><a name="47">   EXPY </a></b><a name="47">( -- / -- )</a><b><a name="47">
</a></b>     Exponentiates the ordinata of the current trace and REPLACES it with the result.
</font><pre><font size="+1" face="Calibri"><b><a name="48">   DER1 </a></b><a name="48">( -- / -- )</a><b><a name="48">
</a></b>     Calculates the first derivative of the current trace and REPLACES it with the result.
</font><pre><font size="+1" face="Calibri"><b><a name="49">   DER2 </a></b><a name="49">( -- / -- )</a><b><a name="49">
</a></b>     Calculates the second derivative of the current trace and REPLACES it with the result.
</font><pre><font size="+1" face="Calibri"><b><a name="50">   DER &nbsp;</a></b><a name="50">( -- / -- )</a><b><a name="50">
</a></b>     DER is a synonym of DER2
</font><pre><font size="+1" face="Calibri"><b><a name="51">   @H </a></b><a name="51">( -- / addr len )</a><b><a name="51">
</a></b>     Returns the header string of the current trace (the trace under line-cursor) as a pair of its
     address and length
</font><pre><font size="+1" face="Calibri"><b><a name="52">   !H </a></b><a name="52">( addr len / -- )</a><b><a name="52">
</a></b>     Replaces the Header of the current trace (the thrace under line-cursor) with the string
     taken from the stack. Example of usage: <b>s" New title" !H</b>
</font><pre><font size="+1" face="Calibri"><b><a name="53">   !comment </a></b><a name="53">( addr len / -- )</a><b><a name="53">
</a></b>     Replaces the Comment string with the string taken from the stack. Example of usage: <b>s" New comment" !comment</b>
</font><pre><font size="+1" face="Calibri"><b><a name="54">   @C </a></b><a name="54">( n1 / --)</a><b><a name="54">
</a></b>     Sets the color of the current trace to that specified by the value taken from the stack (n1)
</font><pre><font size="+1" face="Calibri"><b><a name="55">   !C </a></b><a name="55">( -- / n1)</a><b><a name="55">
</a></b>     Returns the color of the current trace
</font><pre><font size="+1" face="Calibri"><b><a name="56">   !INTR</a></b><a name="56"> ( n1 / -- )</a><b><a name="56">
</a></b>     Turns ON (n1&lt;&gt;0, or n1=TRUE) or OFF (n1=0 or n1=FALSE) interpolation between the points of the current trace
     in the SpectraLab graph window.
</font><pre><font size="+1" face="Calibri"><b><a name="57">   @INTR </a></b><a name="57">( -- / n1 )</a><b><a name="57">
</a></b>     Returns the current settings of interpolation between the points of the current trace (0 if false, -1 if true).
     in the SpectraLab graph window.
</font><pre><font size="+1" face="Calibri"><b><a name="58">   @CNCT </a></b><a name="58">( -- / n1 )</a><b><a name="58">
</a></b>     Returns the current settings of interpolation between the points of the current trace (0 if false, -1 if true).
     in the SpectraLab graph window.
</font><pre><font size="+1" face="Calibri"><b><a name="59">   !CNCT</a></b><a name="59"> ( n1 / -- )</a><b><a name="59">
</a></b>     Turns ON (n1&lt;&gt;0, or n1=TRUE) or OFF (n1=0 or n1=FALSE) linear connection between the points of the current trace
     in the SpectraLab graph window.
</font><pre><font size="+1" face="Calibri"><b><a name="60">   ?SEL</a></b><a name="60"> ( -- / n1 )</a><b><a name="60">
</a></b>     Returns TRUE (-1) if the current trace is selected for graphical display and FALSE (0) otherwise
</font><pre><font size="+1" face="Calibri"><b><a name="61">   !SEL </a></b><a name="61">( -- / -- )</a><b><a name="61">
</a></b>     Marks the current trace as selected for graphical display
</font><pre><font size="+1" face="Calibri"><b><a name="62">   #SEL </a></b><a name="62">( -- / -- )</a><b><a name="62">
</a></b>     Marks the current trace as deselected for graphical display (hidden on the graph)
</font><pre><font size="+1" face="Calibri"><b><a name="63">   DESELECT </a></b><a name="63">( n1 / -- )</a><b><a name="63">
</a></b>     Marks n1 traces starting at the current position as deselected for graphical display (hidden in the graph)
</font><pre><font size="+1" face="Calibri"><b><a name="64">   SELECT </a></b><a name="64">( n1 / -- )</a><b><a name="64">
</a></b>     Marks n1 traces starting at the current position as selected for graphical display
</font><pre><font size="+1" face="Calibri"><b><a name="65">   @M </a></b><a name="65">( n1 / --)</a><b><a name="65">
</a></b>     Sets the graphical display symbol of the current trace to that specified by the value taken from the stack (n1)
</font><pre><font size="+1" face="Calibri"><b><a name="66">   !M </a></b><a name="66">( -- / n1 )</a><b><a name="66">
</a></b>     Returns the graphical display symbol of the current trace
</font><pre><font size="+1" face="Calibri"><b><a name="67">   !$ </a></b><a name="67">( n / -- )</a><b><a name="67">
</a></b>     Moves the cursor-line to location n ( making it the "current location" )
</font><pre><font size="+1" face="Calibri"><b><a name="68">   CLEAR </a></b><a name="68">( n / -- )</a><b><a name="68">
</a></b>     Deletes the current trace (the trace under the cursor-line) )
</font><pre><font size="+1" face="Calibri"><b><a name="69">   CLEARUP </a></b><a name="69">( -- / -- )</a><b><a name="69">
</a></b>     Deletes the current trace and all traces upwards of it
</font><pre><font size="+1" face="Calibri"><b><a name="70">   clearall </a></b><a name="70">( -- / -- )</a><b><a name="70">
</a></b>     Deletes all traces in the memory
</font><pre><font face="Calibri"><font size="+1"><b><a name="71">   ~clearall </a></b><a name="71">( -- / -- )</a><b><a name="71">
</a></b>     Deletes all traces in the memory</font>
</font><h2><font face="Calibri">Some examples of command-line scripts:
</font></h2><ul><li><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><font size="+1" face="Calibri">The following script subtracts the trace located next to the current from the current trace and places the results two lines below</font><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><font size="+1" face="Calibri"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $ #: $ 1 + #: #Y- $ 2 + #! </b></font></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><pre><font size="+1" face="Calibri">Note that in this script, "#Y-" can be substituted with "#-" (these two words are synonims).</font></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></li><li><font size="+1" face="Calibri">The following script calculates the average of three consecutive spectra starting at the current location, smooths the result
with 7-point polynomial smoothing, deletes the original spectra, and places the result at the current location (i.e., replaces the original):<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ #: $ 1 + #: $ 2 + #: #+ #+ 3.0 #/ 7 #SMO $ #! $ 1 + clear $ 2 + clear</b><br>
Below is another variant of a script performing the same operations:<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ #: inc $ #: inc $ #: #+ #+ $ clear dec $ clear dec 3.0 #/ 7 #SMO $ #!</b><br>
</font></li><li><font size="+1" face="Calibri">Suppose that the line cursor is at trace #1 and the memory contains 20 consecutive spectra taken
during some process, and the Z-value of each spectrum is the time passed from the start of registration.
In this case, the following script will produce a kinetic curve of the changes at a wavelength corresponding to point #50 of the spectra.
The resulting curve will be placed at location #21 <br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do(20) $ 50 Y:: 21 $ !Y:: @Z 21 $ !X:: inc</b><br>
Another variant of the same script, where we use 2DUP operator (ANS Forth standard word, which duplicates the two tompost layers
of the stack of integers):<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do(20) $ 50 Y:: 21 $ 2DUP !Y:: @Z !X:: inc</b><br>
</font></li><li><font size="+1" face="Calibri">The following script converts the current trace (the one under the cursor line) into its double-reciprocal
(Lineweaver-Burk) transform and places the result into the location next to the current:<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ #: #LOGY -1.0 #Y* #EXPY #LOGX -1.0 #X* #EXPX $ 1 + #!</b><br>
Note that in this example, in order to obtain reciprocal values of the trace's points, we calculated a logarithm of each axis,
multiplied it by -1 (should be entered as a real number: -1., -1.0 or -1E0), and exponentiated the result back.
This is the only way to calculate reciprocal values of a trace (since there is no operator that divides a number by a trace defined in SpectraLab).
</font></li></ul>
</pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre></pre>
  </body>
</html>
